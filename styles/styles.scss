* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;                 // box-sizing property is used to control how the total width and height of an element are calculated. When using the value border-box, the width and height of the element include the content, padding, and border, all together.
    list-style: none;                       // The CSS rule * {list-style: none;} targets all elements on a webpage and removes the default bullet points or numbering associated with HTML lists.
}

:root {                                     // the :root selector is used to target the root element of an HTML document, which is typically the <html> tag. The :root selector is equivalent to selecting the html element in regular CSS.
    --color-primary: #191d2b;
    --color-secondary: #27AE60;
    --color-white: #FFFFFF;
    --color-black: #000;
    --color-grey0: #f8f8f8;
    --color-grey-1: #dbe1e8;
    --color-grey-2: #b2becd;
    --color-grey-3: #6c7983;
    --color-grey-4: #454e56;
    --color-grey-5: #2a2e35;
    --color-grey-6: #12181b;
    --br-sm-2: 14px;
    --box-shadow-1: 0 3px 15px rgba(0,0,0,.3);
}

.light-mode {
    --color-primary: #FFFFFF;
    --color-secondary: #F56692;
    --color-white: #454e56;
    --color-black: #000;
    --color-grey0: #f8f8f8;
    --color-grey-1: #6c7983;
    --color-grey-2: #6c7983;
    --color-grey-3: #6c7983;
    --color-grey-4: #454e56;
    --color-grey-5: #f8f8f8;
    --color-grey-6: #12181b;
}

body {
    background-color: var(--color-primary); // taken from above
    font-family: 'Poppins', sans-serif;     // copied from googlefonts 
    font-size: 1.1rem;                      // The rem unit stands for "root em" and is relative to the font size of the root element (usually the <html> tag). In this case, 1.1rem means that the font size of the <body> element will be 1.1 times the font size of the root element.
    color: var(--color-white);              // by default the text color inside the body will be white.
    transition: all .4s ease-in-out;        // all -> applies to all the properties of the <body> element, ease-in-out defines the timing function of the transition effect.   
}

a {
    display: inline-block;                  // Element will flow inline with other elements but stil have a width and height, and other block-level properties can be applied to it.
    text-decoration: none;                  // removes any text decoration, such as underlines, overlines, or line-through.
    color: inherit;                         // inherited from body
    font-family: inherit;                   // Inherited from body 
}
header {
    height: 100vh;
    color: var(--color-white);
    overflow: hidden;
}

section {
    min-height: 100vh;
    width: 100%;
    position: absolute;
    left: 0;
    top: 0;
    padding: 3rem 18rem;                    // 3rem (top and bottom), 18rem (left and right)
}

.section {
    transform: translateY(-100%) scale(0);
    transition: all .4s ease-in-out;
    background-color: var(--color-primary);
}

.sec1 {
    display: none;
    transform: translateY(0) scale (1);
    background-color: slateblue;
}
.sec2 {
    display: none;
    transform: translateY(0) scale (1);
    background-color: green;
}
.sec3 {
    display: none;
    transform: translateY(0) scale (1);
    background-color: pink;
}
.sec4 {
    display: none;
    transform: translateY(0) scale (1);
    background-color: blue;
}
.sec5 {
    display: none;
    background-color: rebeccapurple;
}
.active {
    display: block;
    animation: scaleAnim 1s ease-in-out;
    @keyframes scaleAnim {
        0%{
            transform: translateY(-100%) scaleY(0);
        }
        100%{
            transform: translateY(0) scale(1);
        }

    }
}

// Controls
.controls {
    position: fixed;
    z-index: 10;
    top: 50%;
    right:3%;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    transform: translateY(-50%);
    .active-btn {
        background-color: var(--color-secondary) !important;
        transition: all .4s ease-in-out;
        i {
            color: var(--color-white) !important;
        }
    }
    .control {
        display: flex;                          // justify & align wasn't working because somewhere the display:block was set so I had to add this new line
        padding: 1rem;
        cursor: pointer;
        background-color: var(--color-grey-4);
        width: 55px;;
        height: 55px;;
        border-radius: 50%;
        justify-content: center;
        align-items: center;
        margin: .7rem;
        box-shadow: var(--box-shadow-1);
        i {
            font-size: 1.2rem;
            color: var(--color-grey-2);
            pointer-events: none;
        }
    }
}

